name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-branch-protection:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check if commit is directly to main
        run: |
          echo "❌ ERROR: Direct pushes to main are forbidden!"
          echo "This push was made by: ${{ github.actor }}"
          echo "Please use Pull Requests for all changes to main."
          echo "To fix this:"
          echo "1. Create a new branch: git checkout -b fix/description"
          echo "2. Reset main to previous state: git checkout main && git reset --hard HEAD~1"
          echo "3. Push your fix branch and create a PR"
          exit 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety bandit-sarif-formatter

      - name: Bandit Security Scan
        run: |
          # Создаем отчет Bandit
          bandit -r app/ -f json -o bandit-report.json || true
          # Проверяем, создался ли файл
          if [ -f "bandit-report.json" ]; then
            echo "Bandit report created successfully"
          else
            echo "Creating empty bandit report"
            echo '{"results": []}' > bandit-report.json
          fi

      - name: Convert Bandit report to SARIF
        run: |
          # Конвертируем в SARIF
          bandit-sarif-formatter -i bandit-report.json -o bandit-report.sarif
          # Проверяем, что файл создан
          ls -la bandit-report.*

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.sarif

      - name: Safety vulnerability check
        run: safety check --json || true

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi
          pip install mypy pytest-cov ruff black isort pre-commit

      - name: Lint & Format
        run: |
          ruff check --output-format=github . || true
          black --check . || true
          isort --check-only . || true

      - name: Type checking
        run: mypy app/ || true

      - name: Tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80 || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        if: always()

      - name: Pre-commit (all files)
        run: pre-commit run --all-files || true
